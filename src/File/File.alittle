
namespace ALittle;

// 文件加载接口
public class IFileLoader
{
    public fun Load(string file_path) : string { return null; }
}

// 最普通的文件加载器
[Language(Lua)]
public class LuaFileLoader : IFileLoader
{
    public fun Load(string file_path) : string
    {
        var file = lua.io.open(file_path, "r");
        if (file == null) return null;
        var content = file.read("*a");
        file.close();
        return content;
    }
}

[Language(JavaScript)]
public class JFileLoader : IFileLoader
{
    public fun Load(string file_path) : string
    {
        var content, buffer = JavaScript.File_LoadFile(file_path);
        return content;
    }
}

// 文件保存接口
public class IFileSaver
{
    public fun Save(string file_path, string content) : bool { return false; }
}

// 最普通的文件保存期
[Language(Lua)]
public class LuaFileSaver : IFileSaver
{
    public fun Save(string file_path, string content) : bool
    {
        var file = lua.io.open(file_path, "w");
        if (file == null) return false;
        file.write(content);
        file.close();
        return true;
    }
}

[Language(JavaScript)]
public class JFileSaver : IFileSaver
{
    public fun Save(string file_path, string content) : bool
    {
        return JavaScript.File_SaveFile(file_path, content, null);
    }
}

// 获取当前路径
public static File_GetCurrentPath() : string
{
    [Language(Lua)]
    return carp.GetCurrentPath();

    [Language(JavaScript)]
    return JavaScript.File_GetCurrentPath();
}

// 获取当前盘符路径
public static File_GetAllDriver() : List<string>
{
    [Language(Lua)]
    return carp.GetDriveStrings();

    [Language(JavaScript)]
    return new List<string>();
}

// 设置当前路径
public static File_SetCurrentPath(string path) : bool
{
    [Language(Lua)]
    return carp.SetCurrentPath(path);

    [Language(JavaScript)]
    return JavaScript.File_SetCurrentPath(path);
}

// 重命名文件
public static File_RenameFile(string path, string new_path) : bool
{
    [Language(Lua)]
    return lua.os.rename(path, new_path);
    
    [Language(JavaScript)]
    return JavaScript.File_RenameFile(path, new_path);
}

// 删除文件
public static File_DeleteFile(string path) : bool
{
    [Language(Lua)]
    return lua.os.remove(path);
    
    [Language(JavaScript)]
    return JavaScript.File_DeleteFile(path);
}

public struct PathAttribute
{
    bool directory;        // 文件类型
    int size;           // 文件大小
    int create_time;	// 创建时间
}

// 获取文件属性
public static File_GetFileAttr(string path) : PathAttribute
{
    [Language(Lua)]
    return carp.GetPathAttribute(path);
    
    [Language(JavaScript)]
    return JavaScript.File_GetPathAttribute(path);
}

// 获取某个目录以及子目录下的所有文件属性
public static File_GetFileAttrByDir(string path, [Nullable] Map<string, PathAttribute> file_map) : Map<string, PathAttribute>
{
    // 初始化参数
    [Language(Lua)]
    {
        if (file_map == null)
            file_map = new Map<string, PathAttribute>();
        // 遍历路径
        var file_list = carp.GetFileNameListInFolder(path);
        for (var index, file in file_list)
        {
            var file_path = path .. "/" .. file;
            file_map[file_path] = carp.GetPathAttribute(file_path);
        }
        var folder_list = carp.GetFolderNameListInFolder(path);
        for (var index, file in folder_list)
        {
            var file_path = path .. "/" .. file;
            File_GetFileAttrByDir(file_path, file_map);
        }
        // 返回结果
        return file_map;   
    }
    
    [Language(JavaScript)]
    return JavaScript.File_GetFileAttrByDir(path, file_map);
}

// 获取某个目录以及子目录下的所有文件属性
public static File_GetFileListByDir(string path, [Nullable] List<string> out_list) : List<string>
{
    // 初始化参数
    [Language(Lua)]
    {
        if (out_list == null) out_list = new List<string>();
        var file_list = carp.GetFileNameListInFolder(path);
        for (var index, file in file_list)
        {
            var file_path = path .. "/" .. file;
            List_Push(out_list, file_path);
        }
        var folder_list = carp.GetFolderNameListInFolder(path);
        for (var index, file in folder_list)
        {
            var file_path = path .. "/" .. file;
            File_GetFileListByDir(file_path, out_list);
        }
        // 返回结果
        return out_list;   
    }
    
    [Language(JavaScript)]
    return JavaScript.File_GetFileListByDir(path, out_list);
}

// 获取某个目录所有文件属性
public static File_GetNameListByDir(string path, [Nullable] Map<string, PathAttribute> file_map) : Map<string, PathAttribute>
{
    // 初始化参数
    [Language(Lua)]
    {
        if (file_map == null) file_map = new Map<string, PathAttribute>();
        var file_list = carp.GetFileNameListInFolder(path);
        for (var index, file in file_list)
        {
            var file_path = path .. "/" .. file;
            file_map[file] = carp.GetPathAttribute(file_path);
        }
        var folder_list = carp.GetFolderNameListInFolder(path);
        for (var index, file in folder_list)
        {
            var file_path = path .. "/" .. file;
            file_map[file] = carp.GetPathAttribute(file_path);
        }
        // 返回结果
        return file_map;   
    }
    
    [Language(JavaScript)]
    return JavaScript.File_GetNameListByDir(path, file_map);
}

// 删除文件夹(只对空文件夹有效)
public static File_DeleteDir(string path)
{
    [Language(Lua)]
    carp.DeleteFolder(path);
    [Language(JavaScript)]
    JavaScript.File_DeleteDir(path);
}

// 深度删除文件夹
public static File_DeleteDeepDir(string path, [Nullable] bool log_path)
{
    [Language(Lua)]
    {
        // 拦截判断，如果path是空串，表示当前盘的根目录，所以必须拦截
        if (path == null || path == "")
            return;
        if (File_GetFileAttr(path) == null)
            return;
        var file_list = carp.GetFileNameListInFolder(path);
        for (var index, file in file_list)
        {
            var file_path = path .. "/" .. file;
            File_DeleteFile(file_path);
            if (log_path) Log("delete file:", file_path);
        }
        var folder_list = carp.GetFolderNameListInFolder(path);
        for (var index, file in folder_list)
        {
            var file_path = path .. "/" .. file;
            File_DeleteDeepDir(file_path, log_path);
        }
        // 删除文件夹
        File_DeleteDir(path);
    }
    
    [Language(JavaScript)]
    JavaScript.File_DeleteDeepDir(path, log_path);
}

// 复制文件
// src_path 要复制的源文件路径
// dst_path 目标文件路径
public static File_CopyFile(string src_path, string dst_path) : bool
{
    [Language(Lua)]
    return carp.CopyFile(src_path, dst_path);
    [Language(JavaScript)]
    return JavaScript.File_CopyFile(src_path, dst_path);
}

// 深度复制文件夹
// src_path 原文件夹
// dest_path 目标文件夹
// ext 目标后缀名的文件，如果是null表示所有文件
// log 是否打印日志
public static File_CopyDeepDir(string src_path, string dest_path, [Nullable] string ext, [Nullable] bool log)
{
    [Language(Lua)]
    {
        var upper_ext:string = null;
        if (ext != null) upper_ext = lua.String.upper(ext);
        
            // 遍历源文件夹
        var file_list = carp.GetFileNameListInFolder(src_path);
        for (var index, file in file_list)
        {
            // 源文件路径
            var src_file_path = src_path .. "/" .. file;
            // 目标文件路径
            var dest_file_path = dest_path .. "/" .. file;

            if (upper_ext == null || File_GetFileExtByPathAndUpper(src_file_path) == upper_ext)
            {
                File_CopyFile(src_file_path, dest_file_path);
                if (log) Log("copy file:", src_file_path, dest_file_path);
            }
        }
        var folder_list = carp.GetFolderNameListInFolder(src_path);
        for (var index, file in folder_list)
        {
            // 源文件路径
            var src_file_path = src_path .. "/" .. file;
            // 目标文件路径
            var dest_file_path = dest_path .. "/" .. file;

            // 创建文件夹
            carp.CreateFolder(dest_file_path);
            // 开始复制
            File_CopyDeepDir(src_file_path, dest_file_path, upper_ext, log);
        }
    }

    [Language(JavaScript)]
    JavaScript.File_CopyDeepDir(src_path, dest_path, ext, log);
}

// 创建文件夹
public static File_MakeDir(string path)
{
    [Language(Lua)]
    carp.CreateFolder(path);
    [Language(JavaScript)]
    JavaScript.File_MakeDir(path);
}

// 深度创建文件夹
public static File_MakeDeepDir(string path)
{
    // 根据路径分隔符分割
    var path_list = String_SplitSepList(path, ["/", "\\"]);
    // 遍历路径列表
    var cur_path = "";
    for (var index, sub_path in path_list)
    {
        // 计算当前要创建的路径
        cur_path = cur_path .. sub_path;
        // 创建路径
        File_MakeDir(cur_path);
        // 添加分隔符
        cur_path = cur_path .. "/";
    }
}

// 修正路径
public static File_PathEndWithSplit(string file_path) : string
{
    var len = String_Len(file_path);
    if (len == 0) return file_path;
    var byte = String_Byte(file_path, len);
    if (byte == 47 || byte == 92) return file_path;
    if (String_Find(file_path, "\\") != null) return file_path.."\\";
    return file_path.."/";
}

// 从路径中获取文件名(带后缀)
public static File_GetFileNameByPath(string file_path) : string
{
    var list = String_SplitSepList(file_path, ["/","\\"]);
    var l = List_Len(list);
    if (l <= 0) return file_path;
    return list[l];
}

// 从路径中获取路径
public static File_GetFilePathByPath(string file_path) : string
{
    var new_file_path = File_GetFileNameByPath(file_path);
    return String_Sub(file_path, 1, -String_Len(new_file_path) - 2);
}

// 从路径中获取扩展名
public static File_GetFileExtByPath(string file_path) : string
{
    var list = String_Split(file_path, ".");
    var l = List_Len(list);
    if (l <= 0) return file_path;
    return list[l];
}

// 替换扩展名
public static File_ChangeFileExtByPath(string file_path, string ext) : string
{
    var list = String_Split(file_path, ".");
    var l = List_Len(list);
    if (l <= 0) return file_path.."."..ext;
    list[l] = ext;
    return String_Join(list, ".");
}

// 从路径中获取扩展名并改为大写
public static File_GetFileExtByPathAndUpper(string file_path) : string
{
    return String_Upper(File_GetFileExtByPath(file_path));
}

// 从路径中获取文件名(不带后缀)
public static File_GetJustFileNameByPath(string file_path) : string
{
    var new_file_path = File_GetFileNameByPath(file_path);
    var list = String_Split(new_file_path, ".");
    var l = List_Len(list);
    if (l <= 1) return new_file_path;
    if (l == 2) return list[1];
    List_Remove(list, l);
    return String_Join(list, ".");
}

public static File_ReadJsonFromStdFile(string file_path) : any, string
{
    // 读取文件
    [Language(Lua)]
    {
        var file = lua.io.open(file_path, "rb");
        if (file == null) return null, file_path.." load failed";
        var content = file.read("*a");
        file.close();
        var error, new_content = tcall(lua.cjson.decode, content);
        if (error == null) return new_content, content;
        return null, new_content;
    }
    
    [Language(JavaScript)]
    {
        var content = JavaScript.File_LoadFile(file_path);
        if (content == null) return null, file_path.." load failed";
        var error, new_content = tcall(javascript.JSON.parse, content);
        if (error == null) return new_content, content;
        return null, new_content;
    }
}

public static File_WriteJsonFromStdFile(any content, string file_path) : bool
{
    // 读取文件
    [Language(Lua)]
    {
        var file = lua.io.open(file_path, "wb");
        if (file == null) return false;
        file.write(lua.cjson.encode(content));
        file.close();
        return true;
    }
    
    [Language(JavaScript)]
    {
        return JavaScript.File_SaveFile(file_path, javascript.JSON.stringify(content), null);
    }
}

public static File_ReadTextFromStdFile(string file_path) : string
{
    // 读取文件
    [Language(Lua)]
    {
        var file = lua.io.open(file_path, "rb");
        if (file == null) return null;
        var content = file.read("*a");
        file.close();
        return content;
    }
    
    [Language(JavaScript)]
    {
        var content, buffer = JavaScript.File_LoadFile(file_path);
        return content;
    }
}

public static File_WriteTextToStdFile(string content, string file_path) : bool
{
    // 读取文件
    [Language(Lua)]
    {
        var file = lua.io.open(file_path, "wb");
        if (file == null) return false;
        file.write(content);
        file.close();
        return true;
    }
    
    [Language(JavaScript)]
    {
        return JavaScript.File_SaveFile(file_path, content, null);
    }
}