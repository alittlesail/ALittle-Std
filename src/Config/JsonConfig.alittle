namespace ALittle;

public class IJsonConfig
{
    public fun GetConfig<T>(string key, T defaultv) : T { return defaultv; }   
    public fun GetBool(string key, bool defaultv) : bool { return defaultv; }
    public fun GetInt(string key, int defaultv) : int { return defaultv; }
    public fun GetDouble(string key, double defaultv) : double { return defaultv; }
    public fun GetString(string key, string defaultv) : string { return defaultv; }
    public fun SetConfig(string key, any value, [Nullable] bool not_save) {}
    public fun CoverConfig(Map<string, any> msg, bool save) {}
    public fun SaveConfig() {}
}

public class JsonConfig<FL : IFileLoader, FS : IFileSaver> : IJsonConfig
{
    private string              _file_path;
    private Map<string, any>    _config_map;

    public ctor(string file_path, [Nullable] bool print_error)
    {
        // 保存路径
        this._file_path = file_path;
        // 定义KEY-VALUE映射
        this._config_map = new Map<string, any>();
        
        // 读取全部内容
        var file = new FL();
        var content = file.Load(this._file_path);
        if (content == null)
        {
            if (print_error)
                Error("config load failed." .. file_path);
            return;
        }
        
        // 解析配置文件
        var error, json_content = tcall(String_JsonDecode, content);
        if (error != null)
        {
            // 检查文件是否带了BOM，如果是那么就重新解析一次
            // utf8:0xef 0xbb 0xbf
            var byte_1 = String_Byte(content, 1) == 0xef;
            var byte_2 = String_Byte(content, 2) == 0xbb;
            var byte_3 = String_Byte(content, 3) == 0xbf;
            if (byte_1 && byte_2 && byte_3)
            {
                content = String_Sub(content, 4);
                error, json_content = tcall(String_JsonDecode, content);
                if (error != null)
                {
                    Error("Json Decode failed(delete bom)." .. file_path .. ", " .. error);
                    return;
                }
            }
            else
            {
                Error("Json Decode failed." .. file_path .. ", " .. error);
                return;
            }
        }

        // 保存解析内容
        this._config_map = json_content;
    }
    
    public fun GetConfig<T>(string key, T defaultv) : T
    {
        // 获取值
        var value = cast<T>(this._config_map[key]);
        // 如果为空则返回默认值
        if (value == null) return defaultv;
        return value;
    }
    
    public fun GetBool(string key, bool defaultv) : bool
    {
        var value = this.GetConfig(key, defaultv);
        return value != null && value != false;
    }
    
    public fun GetInt(string key, int defaultv) : int
    {
        var value = this.GetConfig(key, defaultv);
        if (value == null) value = 0;
        return value;
    }
    
    public fun GetDouble(string key, double defaultv) : double
    {
        var value = this.GetConfig(key, defaultv);
        if (value == null) value = 0;
        return value;
    }
    
    public fun GetString(string key, string defaultv) : string
    {
        var value = this.GetConfig(key, defaultv);
        if (value == null) value = "";
        return value;
    }
    
    public fun SetConfig(string key, any value, [Nullable] bool not_save)
    {
        // 保存新值
        this._config_map[key] = value;
        if (!not_save)
            this.SaveConfig();
    }
    
    public fun CoverConfig(Map<string, any> msg, bool save)
    {
        for (var k, v in msg)
            this._config_map[k] = v;
        if (!save)
            this.SaveConfig();
    }
    
    public fun SaveConfig()
    {
        // 保存配置值
        var file = new FS();
        if (!file.Save(this._file_path, String_JsonEncode(this._config_map)))
            Log("Save Congig Failed.", this._file_path);
    }
}

public static CreateJsonConfig(string file_path, [Nullable] bool print_error) : IJsonConfig
{
    [Language(Lua)]
    return new JsonConfig<LuaFileLoader, LuaFileSaver>(file_path, print_error);
    
    [Language(JavaScript)]
    return new JsonConfig<JFileLoader, JFileSaver>(file_path, print_error);
}